library(Seurat)
library(ggplot2)
library(dplyr)
library(tidyr)   
library(AUCell)
library(scales)
library(tidydr)
library(future)
library(patchwork)
library(data.table)
library(tidyverse)
library(RColorBrewer)
library(SingleCellExperiment)
library(SummarizedExperiment)
library(plyr)
library(ggsci)
library(philentropy)
library(ggrepel)
library(latex2exp)


Read
##############################################
setwd('/home/data/project/dataset/')
fdir='/home/data/project/dataset/' 
dir.files <- list.files(pattern="Sample*", path=fdir)
dir.files
data.files <- lapply(dir.files, Read10X) 
length(data.files)
data.files[[1]][1:5, 1:3] 
names(data.files) <- dir.files
names(data.files)
seurat.list <- list()
Sample =c("Sample1", "Sample2", "Sample3", "Sample4", "Sample5", "Sample6", "Sample7", "Sample8")
Dataset <- "Dataset1"
for(i in 1:length(data.files)){
  seurat.list[[i]] <- CreateSeuratObject(counts=as.matrix(data.files[[i]]), min.cells=3, min.features = 200)
  seurat.list[[i]]$orig.ident <- Sample[i]
  seurat.list[[i]]$Sample <- c(rep(Sample[i], nrow(seurat.list[[i]]@meta.data)))
  seurat.list[[i]]$Dataset <- c(rep(Dataset[1], nrow(seurat.list[[i]]@meta.data)))
  seurat.list[[i]][["percent_mt"]] <- PercentageFeatureSet(seurat.list[[i]], pattern = "^MT-")
  seurat.list[[i]][["percent_ribo"]] <- PercentageFeatureSet(seurat.list[[i]], pattern = "^RP[SL]")
  seurat.list[[i]][["percent_hb"]] <- PercentageFeatureSet(seurat.list[[i]], pattern = "HB[^(p)]")
  #VlnPlot.list[[i]] <- VlnPlot(seurat.list[[i]], features = c("nFeature_RNA", "nCount_RNA", "percent_mt"), ncol=3, pt.size=0.1)
}
names(seurat.list) <- Sample
seurat.list
saveRDS(seurat.list, file = "seurat_list.rds")


QC
##############################################
seurat.list <- readRDS("/home/data/project/all/seurat_list.rds")
seurat.all <- merge(seurat.list[[1]], y=c(seurat.list[c(2:length(seurat.list))]),
                    add.cell.ids = names(seurat.list),
                    project = "scRNA-seq")
dim(seurat.all)
t1 <- table( seurat.all$Group, seurat.all$orig.ident)
t2 <- table( seurat.all$Sample, seurat.all$orig.ident)
balloonplot(t1)
balloonplot(t2)
feats <- c("percent_mt", "percent_ribo", "percent_hb")
VlnPlot(seurat.all, group.by = "orig.ident", features = feats, pt.size = 0.0, ncol = 3, same.y.lims=T) + 
  scale_y_continuous(breaks=seq(0, 100, 5)) +
  NoLegend()
feats <- c("nFeature_RNA", "nCount_RNA")  
VlnPlot(seurat.all, group.by = "orig.ident", features = feats, pt.size = 0.0, ncol = 2) + NoLegend()
FeatureScatter(seurat.all, "nCount_RNA", "nFeature_RNA", group.by = "orig.ident", pt.size = 0.5)
mito_genes=rownames(seurat.all)[grep("^MT-", rownames(seurat.all))] 
mito_genes 
ribo_genes=rownames(seurat.all)[grep("^Rp[sl]", rownames(seurat.all),ignore.case = T)]
ribo_genes
rownames(seurat.all)[grep("^Hb[^(p)]", rownames(seurat.all),ignore.case = T)]
C=seurat.all@assays$RNA@counts 
dim(C)
class(C)
C=Matrix::t(Matrix::t(C)/Matrix::colSums(C)) * 100
C=C[,sample(1:ncol(C),1000)]
most_expressed <- order(apply(C, 1, median), decreasing = T)[50:1]
pdf("TOP50_most_expressed_gene.pdf",width=14)
boxplot(as.matrix(Matrix::t(C[most_expressed, ])),
        cex = 0.1, las = 1, 
        xlab = "% total count per cell", 
        col = (scales::hue_pal())(50)[50:1], 
        horizontal = TRUE)
dev.off()
rm(C)
for (i in 1:length(seurat.list)) {
  seurat.list[[i]] <- subset(seurat.list[[i]],subset = nFeature_RNA > 200 & nFeature_RNA < 4000 & nCount_RNA < 20000 & percent_mt<10 )
  seurat.list[[i]] <- subset(seurat.list[[i]],subset = percent_ribo > 2 & percent_hb < 0.2 )
}
seurat.list
VlnPlot(seurat.list[[7]], features = c("nFeature_RNA", "nCount_RNA", "percent_mt"), ncol = 3)
fivenum(seurat.list[[7]]@meta.data$percent_ribo)
scRNA <- merge(seurat.list[[1]], y=c(seurat.list[c(2:length(seurat.list))]),
               add.cell.ids = names(seurat.list),
               project = "scRNA-seq")
table(scRNA$orig.ident)
dim(scRNA)
sample_cols <-c("#A6CEE3" ,"#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", 
                "#E31A1C", "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A", 
                "#FFFF99", "#984EA3", "#FFFF33", "#A65628", "#F781BF", 
                "#999999", "#8DD3C7", "#FCCDE5", "#A6D854", "#FFD92F","#66C2A5")
p3=FeatureScatter(scRNA, "nCount_RNA", "nFeature_RNA", group.by = "orig.ident", pt.size = 0.5, cols = sample_cols)
print(p3)
ggsave(p3, filename = "FeatureScatter.pdf", width = 8, height = 6)
feats <- c("percent_mt", "percent_ribo", "percent_hb")
VlnPlot(scRNA, group.by = "orig.ident", features = feats, pt.size = 0.0, ncol = 3, same.y.lims=T) + 
  scale_y_continuous(breaks=seq(0, 100, 5)) +
  NoLegend()
feats <- c("nFeature_RNA", "nCount_RNA")  
VlnPlot(scRNA, group.by = "orig.ident", features = feats, pt.size = 0.0, ncol = 2) + NoLegend()
dim(scRNA)
dim(seurat.all)
t3 <- table(scRNA$orig.ident, scRNA$Dataset) 
balloonplot(t3)
saveRDS(scRNA, file = "scRNA_QC_filter.rds")


DoubletFinder
##############################################
library(DoubletFinder) 
setwd("/home/data/project/DoubletFinder/")
seurat.all=readRDS("../all/scRNA_QC_filter.rds")
seurat.all.list <- SplitObject(seurat.all, split.by = "orig.ident")
seurat.all.list
ndims <- 1:30
phe_lt <- lapply(names(seurat.all.list), function(x){
  seurat.all.filt=seurat.all.list[[x]]
  seurat.all.filt = NormalizeData(seurat.all.filt)
  seurat.all.filt = FindVariableFeatures(seurat.all.filt)
  seurat.all.filt = ScaleData(seurat.all.filt, features = rownames(seurat.all.filt))
  seurat.all.filt = RunPCA(seurat.all.filt, npcs = 50)
  seurat.all.filt = RunTSNE(seurat.all.filt, dims = ndims)
  seurat.all.filt = RunUMAP(seurat.all.filt, dims = ndims)
  seurat.all.filt <- FindNeighbors(seurat.all.filt, dims = ndims) %>% FindClusters(resolution = 0.5)
  sweep.res.list <- paramSweep_v3(seurat.all.filt, PCs = ndims, sct = F)
  sweep.stats <- summarizeSweep(sweep.res.list, GT = FALSE)  
  bcmvn <- find.pK(sweep.stats)
  pK_bcmvn <- bcmvn$pK[which.max(bcmvn$BCmetric)] %>% as.character() %>% as.numeric()
  DoubletRate = 0.075
  homotypic.prop <- modelHomotypic(seurat.all.filt$seurat_clusters) 
  nExp_poi <- round(DoubletRate*ncol(seurat.all.filt)) 
  nExp_poi.adj <- round(nExp_poi*(1-homotypic.prop))
  seurat.all.filt <- doubletFinder_v3(seurat.all.filt, 
                                      PCs = ndims, pN = 0.25, 
                                      pK = pK_bcmvn, 
                                      nExp = nExp_poi.adj, reuse.pANN = F, 
                                      sct = F)
  DF.name = colnames(seurat.all.filt@meta.data)[grepl("DF.classification", 
                                                      colnames(seurat.all.filt@meta.data))]
  p5.dimplot=cowplot::plot_grid(ncol = 2, DimPlot(seurat.all.filt, group.by = "orig.ident") + NoAxes(), 
                                DimPlot(seurat.all.filt, group.by = DF.name) + NoAxes())
  p5.dimplot
  ggsave(filename=paste0("doublet_dimplot_",x,".png"),
         plot=p5.dimplot)
  
  p5.vlnplot=VlnPlot(seurat.all.filt, features = "nFeature_RNA", 
                     group.by = DF.name, pt.size = 0.1)
  p5.vlnplot
  ggsave(paste0("doublet_vlnplot_",x,".png"),
         plot=p5.vlnplot)
  print(table(seurat.all.filt@meta.data[, DF.name] ))
  phe=seurat.all.filt@meta.data
  phe
})
kpCells=unlist(lapply(phe_lt, function(x){
  #table(x[,ncol(x)])
  rownames(x[ x[,ncol(x)]=='Singlet', ])
}))
kp = colnames(seurat.all) %in% kpCells
table(kp)
saveRDS(kp, file = "kp.rds")
dim(seurat.all)
seurat=seurat.all[,kp]
dim(seurat)
saveRDS(seurat, "seurat_all_doublet_filt.rds")


Cell Clustering
##############################################
setwd("/home/data/project/cluster")
seurat.all.filt=readRDS("../DoubletFinder/seurat_all_doublet_filt.rds")
dim(seurat.all.filt)
seurat=seurat.all.filt 
seurat ;dim(seurat)
seurat.all.list <- SplitObject(seurat, split.by = "orig.ident")
length(seurat.all.list)
for (i in 1:length(seurat.all.list)) {
  print(i)
  seurat.all.list[[i]] <- NormalizeData(seurat.all.list[[i]], verbose = FALSE)
  seurat.all.list[[i]] <- FindVariableFeatures(seurat.all.list[[i]], 
                                               selection.method = "vst", 
                                               nfeatures = 2000, verbose = FALSE)
}
plan()
future::plan(future::multicore(workers = 10))
plan()
options(future.globals.maxSize = 8000 * 1024^2)
alldata.anchors <- FindIntegrationAnchors(object.list = seurat.all.list, 
                                          dims = 1:30, 
                                          reduction = "cca")
seurat.all.int <- IntegrateData(anchorset = alldata.anchors, 
                                dims = 1:30, 
                                new.assay.name = "CCA")
names(seurat.all.int@assays)
seurat.all.int@active.assay
s.genes=Seurat::cc.genes.updated.2019$s.genes
g2m.genes=Seurat::cc.genes.updated.2019$g2m.genes
DefaultAssay(seurat.all.int) <- "RNA"
seurat.all.int=CellCycleScoring(object = seurat.all.int, 
                                s.features = s.genes, 
                                g2m.features = g2m.genes, 
                                set.ident = TRUE)
pdf(file="Vlnplot_cycle_score.pdf", width = 10, height = 6)
plot1 <- VlnPlot(seurat.all.int, 
                 features = c("S.Score", "G2M.Score"), 
                 group.by = "orig.ident", 
                 ncol = 2, pt.size = 0)
print(plot1)
dev.off()
pdf(file="cycle_phase.pdf", width = 10, height = 6)
seurat.all.int@meta.data  %>% 
  ggplot(aes(S.Score,G2M.Score))+
  geom_point(aes(color=Phase))+
  theme_minimal()
dev.off()
DefaultAssay(seurat.all.int) <- "CCA"
plan("sequential")
plan()
seurat.all.int=ScaleData(seurat.all.int,
                         features = rownames(seurat.all.int))
seurat.all.int=RunPCA(seurat.all.int, npcs = 50)
if(F){
  scRNA <- seurat.all.int
  #ElbowPlot(object = scRNA,ndims = 50)
  # Determine percent of variation associated with each PC
  pct <- scRNA[["pca"]]@stdev / sum(scRNA[["pca"]]@stdev) * 100
  # Calculate cumulative percents for each PC
  cumu <- cumsum(pct)
  # Determine which PC exhibits cumulative percent greater than 90% and % variation associated with the PC as less than 5
  co1 <- which(cumu > 90 & pct < 5)[1]
  # Determine the difference between variation of PC and subsequent PC
  co2 <- sort(which((pct[1:length(pct) - 1] - pct[2:length(pct)]) > 0.1), decreasing = T)[1] + 1
  # last point where change of % of variation is more than 0.1%.
  co2
  # Minimum of the two calculation
  pcs <- min(co1, co2)
  pcs
  # Create a dataframe with values
  plot_df <- data.frame(pct = pct,
                        cumu = cumu,
                        rank = 1:length(pct))
  # Elbow plot to visualize
  pdf(file="Elbow_plot.pdf", width = 10, height = 6)
  ggplot(plot_df, aes(cumu, pct, label = rank, color = rank > pcs)) +
    geom_text() +
    geom_vline(xintercept = 90, color = "grey") +
    geom_hline(yintercept = min(pct[pct > 5]), color = "grey") +
    theme_bw()  
  dev.off()
}
ndims <- 1:20
seurat.all.int=RunTSNE(seurat.all.int, dims = ndims)
seurat.all.int=RunUMAP(seurat.all.int, dims = ndims)
names(seurat.all.int@reductions)
seurat.all.int <- FindNeighbors(seurat.all.int, dims = ndims)
seurat.all=seurat.all.int
for (res in c(0.1, 0.3, 0.5,0.8,1,1.2,1.4,1.5,1.8,2)) {
  seurat.all=FindClusters(seurat.all, resolution = res, algorithm = 1)
}
colnames(seurat.all@meta.data)
apply(seurat.all@meta.data[,grep("CCA_snn",colnames(seurat.all@meta.data))],2,table)
library(clustree)
plot_tree <- clustree(seurat.all@meta.data, prefix = "CCA_snn_res.")
ggsave(plot <- tree, filename="Tree_resolution.pdf", width = 10, height = 10)
sel.clust = "CCA_snn_res.0.8"
seurat.all <- SetIdent(seurat.all, value = sel.clust)
table(seurat.all@active.ident) 
DimPlot(object = seurat.all, 
        repel=TRUE,
        reduction="umap",
        label = TRUE)
DimPlot(object = seurat.all, 
        repel=TRUE,
        reduction="tsne",
        label = TRUE)
DimPlot(object = seurat.all, 
        repel=TRUE,
        reduction="umap",
        label = TRUE, 
        group.by = "Sample") 
DimPlot(object = seurat.all, 
        repel=TRUE,
        reduction="umap",
        label = TRUE, 
        split.by = "Dataset") 
scRNA <- seurat.all
DefaultAssay(scRNA) <- "RNA"
markergene_1<-FeaturePlot(scRNA,reduction="tsne",pt.size=0.5,features = 
                            c("CD3D","CD3E","CD3G","CD2"))
markergene_2<-FeaturePlot(scRNA,reduction="tsne",pt.size=0.5,features = 
                            c("MS4A1","CD79A","CD79B","IGHM"))
markergene_3<-FeaturePlot(scRNA,reduction="tsne",pt.size=0.5,features = 
                            c("NKG7","GNLY","KLRD1","NCR1"))
markergene_4<-FeaturePlot(scRNA,reduction="tsne",pt.size=0.5,features = 
                            c("LYZ", "CD14","FCGR3A","CD163"))
genes_to_check = c('PTPRC', 'CD3D', 'CD3E',    
                   "CALD1", "ACTA2" , 
                   "MZB1","SDC1",     
                   "CLEC4C", "GZMB", 
                   "NKG7", "GNLY", 
                   "LYZ", "CD68","FOXP3",
                   "TPSAB1", "CPA3", 
                   "COL1A1", "PDGFRA", 
                   "VWF", "PECAM1",
                   'MS4A1', "CD79A", 
                   "FCER1A", "CD1C", 
                   "TOP2A", "MKI67")  
plot2 <- DotPlot(scRNA, assay = "RNA", features = genes_to_check) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
#plot2$data$id = factor(plot2$data$id, levels(scRNA$seurat_clusters) %>% rev)
#plot2$data$id = factor(plot2$data$id, levels(scRNA$seurat_clusters))
#plot2 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
dat=plot2$data
cd45=dat[dat$features.plot=='PTPRC',]
fivenum(cd45$avg.exp.scaled)
imm=cd45[cd45$avg.exp.scaled > median(cd45$avg.exp.scaled),]$id
imm
feats <- c("nFeature_RNA", "nCount_RNA")
VlnPlot(scRNA, 
        group.by = "seurat_clusters", 
        features = feats, pt.size = 0, ncol = 2) + 
  NoLegend()
(n=length(unique(scRNA@meta.data$seurat_clusters)))
celltype=data.frame(ClusterID=0:(n-1),
                    celltype='unkown')
celltype[celltype$ClusterID %in% c(0,2,3,5,8,12,13,14,17,19,20,21),2]='immune'
celltype[celltype$ClusterID %in% c(1,16,4,7,15,6,9,10,11,18),2]='non-immune'
scRNA@meta.data$celltype = "NA"
for(i in 1:nrow(celltype)){
  scRNA@meta.data[which(scRNA@meta.data$seurat_clusters == celltype$ClusterID[i]),'celltype'] <- celltype$celltype[i]}
table(scRNA@meta.data$celltype) 
metadata=scRNA@meta.data
DimPlot(scRNA, reduction = 'tsne',  
        label = TRUE, pt.size = 0.5) + NoLegend()
DimPlot(scRNA, reduction = 'tsne', group.by = 'celltype',
        label = TRUE, pt.size = 0.5) + NoLegend()
saveRDS(scRNA, file = "scRNA_immun_annotation.rds")
RColorBrewer::brewer.pal.info
cell_cluster_cols <- c(brewer.pal(12,"Paired"),brewer.pal(12, "Set3"), brewer.pal(3, "Dark2"))
cell_type_cols <- brewer.pal(3,"Set1")
DimPlot(scRNA,
        reduction = "tsne",
        label = T, 
        label.size = 6, 
        cols = cell_cluster_cols)
pdf(file="./tsne_cell_cluster.pdf", width = 8, height = 8)
DimPlot(scRNA, reduction = 'tsne',  
        group.by = 'seurat_clusters', label = T,
        cols=cell_cluster_cols, 
        label.size = 5, 
        pt.size=0.2)+  
  NoLegend()+labs(x = "tSNE_1", y = "tSNE_2") +   
  theme(axis.text.y = element_blank(),   
        axis.ticks.y = element_blank(),   
        axis.text.x = element_blank(),   
        axis.ticks.x = element_blank())+  
  theme(panel.border = element_rect(fill=NA,color="black", size=1, linetype="solid")) 
dev.off()
pdf(file="./tsne_celltype.pdf", width = 8, height = 8)
DimPlot(scRNA, reduction = 'tsne',  
        group.by = 'celltype', 
        label = T,
        cols=cell_type_cols, 
        label.size = 5, 
        pt.size=0.2)+  
  NoLegend()+labs(x = "tSNE_1", y = "tSNE_2") +   
  theme(axis.text.y = element_blank(),   
        axis.ticks.y = element_blank(),   
        axis.text.x = element_blank(),   
        axis.ticks.x = element_blank())+  
  theme(panel.border = element_rect(fill=NA,color="black", size=1, linetype="solid"))  
pdf(file="./umap_cell_cluster.pdf", width = 8, height = 8)
DimPlot(scRNA, reduction = 'umap',  
        group.by = 'seurat_clusters', 
        label = T,
        cols=cell_cluster_cols, 
        label.size = 5, 
        pt.size=0.2)+  
  NoLegend()+labs(x = "UMAP_1", y = "UMAP_2") +   
  theme(axis.text.y = element_blank(),   
        axis.ticks.y = element_blank(),   
        axis.text.x = element_blank(),   
        axis.ticks.x = element_blank())+  
  theme(panel.border = element_rect(fill=NA,color="black", size=1, linetype="solid"))  
dev.off()
pdf(file="./umap_celltype.pdf", width = 8, height = 8)
DimPlot(scRNA, reduction = 'umap',  
        group.by = 'celltype', 
        label = T,
        cols=cell_type_cols, 
        label.size = 5, 
        pt.size=0.2)+  
  NoLegend()+labs(x = "UMAP_1", y = "UMAP_2") +   
  theme(axis.text.y = element_blank(),   
        axis.ticks.y = element_blank(),   
        axis.text.x = element_blank(),   
        axis.ticks.x = element_blank())+  
  theme(panel.border = element_rect(fill=NA,color="black", size=1, linetype="solid"))  
dev.off()
DefaultAssay(scRNA) <- "RNA"
pdf(file = "Dotplot_cell_cluster.pdf", width = 16, height = 8)
DotPlot(object = scRNA, 
        group.by = 'seurat_clusters',
        cluster.idents = F, 
        features = genes_to_check, 
        col.max = 2, 
        col.min = -1.5,
        cols = c("#436EEE","#FF6A6A","#FFA500","#FF34B3","#ADFF2F","#00F5FF")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
pdf(file = "Dotplot_celltype.pdf", width = 16, height = 8)
DotPlot(object = scRNA, 
        group.by = 'celltype',
        cluster.idents = F, 
        features = genes_to_check, 
        col.max = 2, 
        col.min = -1.5,
        cols = c("#436EEE","#FF6A6A","#FFA500","#FF34B3","#ADFF2F","#00F5FF")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()


##############################################
scRNA <- readRDS("../cluster/scRNA_immun_annotation.rds")
table(scRNA$Group)
DefaultAssay(scRNA) <- "RNA"
av <-AverageExpression(scRNA,
                       group.by = "celltype",
                       assays = "RNA") 
av=av[[1]]
head(av)
cg=names(tail(sort(apply(av, 1, sd)),1000))
pheatmap::pheatmap(cor(av[cg,]))


##############################################
library("metadataatmap")
library("ggthemes")
library("plyr")
scRNA <- readRDS("../cluster/scRNA_immun_annotation.rds")
metadata <- scRNA@meta.data
colnames(metadata)
metadata <- subset(metadata, metadata$Dataset %in% c("dataset1"))
table(metadata$Position)
table(metadata$Dataset)
table(metadata$celltype)
metadata$celltype <- as.character(metadata$celltype)
colnames(metadata)[17] <- "Sub_Cluster"
colnames(metadata)[4] <- "Tissue"
Roe <- calTissueDist(metadata,colname.cluster="Sub_Cluster", colname.tissue="Tissue")
class(Roe)
metadataatmap::metadataatmap(Roe, 
                             cluster_rows = F, 
                             cluster_cols = F, 
                             color = colorRampPalette(brewer.pal(n = 7, name ="YlOrRd"))(50),
                             display_numbers = TRUE,
                             number_color = "black")
Roe <- as.data.frame(Roe)
colnames(Roe) <- c("celltype", "position", "Roe")
table(Roe$position)
table(Roe$celltype)
Roe$celltype <- factor(Roe$celltype, levels = c("B", "Plasma", "T", "NK", "Myeloid",  "Mast"))
plot <- ggplot(Roe,aes(x = celltype,y =Roe,
                       group=position,color=position))+
  geom_point(data = Roe, aes(size=Roe), shape=21,color='grey')+
  scale_size_continuous(range  = c(0, 2),breaks = c(0, 0.05, 0.1, 0.15, 0.2))+
  stat_summary(geom = 'line',fun='mean',cex=1,linetype=2)+
  geom_point(data = Roe, aes(size=Roe), alpha=0.5)+
  scale_color_manual(values=c("#cd2626", "#4682b4"))+
  theme_classic() + 
  theme(
    axis.line = element_line(size = 0.2),      
    axis.ticks = element_line(size = 0.3),
    axis.text.y = element_text(face = "italic", colour = "black"),
    axis.text.x = element_text(colour = "black", angle = 45, hjust = 1),
    plot.margin = unit(c(2, 1, 1, 1), "cm")) + 
  labs(x = "",     
       y = "Ro/e",
       title = "")+
  theme(plot.title = element_text(hjust = 0.5))
plot


##############################################
library(ROGUE)
scRNA <- readRDS("../cluster/scRNA_immun_annotation.rds")
metadata <-  scRNA@meta.data
head(metadata, 3)
expr <- as.matrix(scRNA@assays$RNA@counts)
test <- expr[, 1:10]
dim(expr)
expr <- matr.filter(expr, min.cells = 10, min.genes = 10) 
dim(expr)
ent.res <- SE_fun(expr)
head(ent.res)
SEplot(ent.res)
rogue.value <- CalculateRogue(ent.res, platform = "UMI")
rogue.value
rogue.res <- rogue(expr, labels = meta$celltype, samples = meta$orig.ident, platform = "UMI", span = 0.6)
rogue.boxplot(rogue.res)
rogue_value <- t(rogue.res)
rogue_value <- as.data.frame(rogue_value)
rogue_value$celltype <- rownames(rogue_value)
rogue <- gather(rogue_value, key = "Sample", value = "rogue_value", 1:17 )
plot <- ggplot(rogue, aes(x=celltype, y=rogue_value, fill=celltype)) + 
  #geom_violin()+
  stat_boxplot(geom="errorbar",width=0.15)+
  geom_boxplot(width=0.5, outlier.size = 0, outlier.colour = "white")+
  #theme_classic()+
  theme_linedraw()+
  scale_fill_manual(values = cell_type_cols)+
  #coord_flip()+
  coord_flip(ylim = c(0.4, 1), expand = 1, clip = "off") + 
  scale_x_discrete(limits=rev(c("B", "NK", "Mast", "T", "Plasma", "Myeloid"))) +
  scale_y_continuous(expand = c(0, 0), 
                     limits = c(0.4, 1), 
                     breaks = seq(0.4, 1, by = 0.2), 
                     labels = scales::number_format(accuracy = 0.1)) +
  theme(
    #panel.border = element_rect(fill = "white", colour = "black"), 
    #panel.background = element_rect(fill = "white", color = "black", size = 0.5),
    panel.grid = element_line(color = "white", size = 0.3),
    axis.line = element_line(size = 0.2),      
    axis.ticks = element_line(size = 0.5),
    axis.text.y = element_text(face = "italic", colour = "black"),
    axis.text.x = element_text(colour = "black", angle = 45, hjust = 1),
    axis.ticks.x = element_line(),
    plot.title = element_text(size = 15,hjust = 0.5) ,
    plot.margin = unit(c(2, 1, 1, 1), "cm")) +
  NoLegend()+
  labs(
    x = "", 
    y = "Rogue", 
    title = "Purity for celltype ")
print(plot)
ggsave(plot, filename = "boxplot_rogue.pdf", width = 8, height = 5)


##############################################
library(SingleCellExperiment)
library(monocle)
library(BiocGenerics)
library(CytoTRACE)
getOption('timeout')
options(timeout=10000)
setwd("/home/data/project/monocle")
scRNA <- readRDS("scRNA_monocle_annotation.rds")
t1 <- table(scRNA$Dataset, scRNA$celltype)
balloonplot(t1)
expr_matrix <- as(as.matrix(scRNA@assays$RNA@counts), 'sparseMatrix')
p_data <- scRNA@meta.data 
f_data <- data.frame(gene_short_name = row.names(scRNA),
                     row.names = row.names(scRNA))
pd <- new('AnnotatedDataFrame', data = p_data) 
fd <- new('AnnotatedDataFrame', data = f_data)
cds <- newCellDataSet(expr_matrix,
                      phenoData = pd,
                      featureData = fd,
                      lowerDetectionLimit = 0.5,
                      expressionFamily = negbinomial.size())
cds
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
cds <- detectGenes(cds, min_expr = 0.1) 
print(head(fData(cds)))
expressed_genes <- row.names(subset(fData(cds),
                                    num_cells_expressed >= 10)) 
diff <- differentialGeneTest(cds[expressed_genes,], fullModelFormulaStr="~celltype") 
head(diff)
deg <- subset(diff, qval < 0.00000005) 
deg <- deg[order(deg$qval,decreasing=F),]
head(deg)
ordergene <- rownames(deg) 
cds <- setOrderingFilter(cds, ordergene)  
plot_ordering_genes(cds)
cds <- reduceDimension(cds, 
                       max_components = 2,
                       method = 'DDRTree')
cds <- orderCells(cds)
plot1 <- plot_cell_trajectory(cds, 
                              color_by = "State",
                              size=1,
                              show_backbone=TRUE)+
  scale_color_manual(breaks = c("1", "2", "3","4", "5", "6", "7"), 
                     values=c(brewer.pal(7, "Pastel1"))) + 
  theme(legend.position = "right")
print(plot1)
plot2 <- plot_cell_trajectory(cds,
                              color_by="celltype", 
                              size=1,
                              show_backbone=TRUE)+
  theme(legend.position = "right")
print(plot2)

scRNA <- readRDS("scRNA_monocle_annotation.rds")
table(scRNA$celltype)
metadata <- scRNA$celltype
metadata = as.character(metadata)
names(metadata) <- rownames(scRNA@meta.data)
mat <- as.matrix(scRNA@assays$RNA@counts)
mat[1:4,1:4]
results <- CytoTRACE(mat = mat, ncores = 8)
scRNA$celltype <- as.factor(scRNA$celltype)
scRNA$seurat_clusters <- as.factor(as.character(scRNA$seurat_clusters))
table(scRNA$Group)
table(Idents(scRNA))
celltype <- unique(scRNA$celltype)
celltype <- as.character(celltype)
Idents(scRNA) <- "celltype"
plotCytoGenes(results, 
              numOfGenes = 10,
              outputDir = "CytoTRACE_all")
plotCytoTRACE(results, 
              metadatanotype = metadata,
              colors = cell_type_cols,
              outputDir = "CytoTRACE_all")
result <- results$CytoTRACE
dat <- data.frame(names(result), result, scRNA@meta.data$celltype)
colnames(dat) <- c("cell_names", "CytoTRACE", "celltype")
scRNA@meta.data$CytoTRACE <- dat$CytoTRACE
Idents(scRNA) <- "celltype"
plot1 <- VlnPlot(scRNA,
                 features = 'CytoTRACE', 
                 pt.size = 0, 
                 cols = cell_type_cols, 
                 sort = T)
plot2 <- ggplot(dat, aes(x=celltype, y=CytoTRACE, fill=celltype)) + 
  #geom_violin()+
  stat_boxplot(geom="errorbar",width=0.15)+
  geom_boxplot(width=0.5, outlier.size = 0, outlier.colour = "white")+
  theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  coord_flip()
print(plot2)


##############################################
library(AUCell)
library(GSEABase)
setwd("/home/data/project/AUCell/")
scRNA <-readRDS("scRNA_immun_annotation.rds")
table(scRNA$CellType)
scRNA <- scRNA[, scRNA$CellType %in% "Macrophage"]
table(scRNA$celltype)
Idents(scRNA) <- "celltype"
cells_rankings <- AUCell_buildRankings(scRNA@assays$RNA@data) 
geneset1 <- read.gmt("CHOLESTEROL_EFFLUX.gmt")
geneset2 <- read.gmt("ANGIOGENESIS.gmt")
geneset3 <- read.gmt("CHOLESTEROL_ESTERIFICATION.gmt")
geneset4 <- read.gmt("PHAGOCYTOSIS.gmt")
geneset5 <- read.gmt("AUTOPHAGY.gmt")
geneset6 <- read.gmt("LYSOSOME.gmt")
geneset7 <- c('IL23','TNF','CXCL9','CXCL10','CXCL11','CD86','IL1A','IL1B','IL6','CCL5','IRF5','IRF1','CD40','IDO1','KYNU','CCR7')
geneset8 <- c('IL4R','CCL4','CCL13','CCL20','CCL17','CCL18','CCL22','CCL24','LYVE1','VEGFA','VEGFB','VEGFC','VEGFD','EGF','CTSA','CTSB','CTSC','CTSD','TGFB1','TGFB2','TGFB3','MMP14','MMP19','MMP9','CLEC7A','WNT7B','FASL','TNFSF12','TNFSF8','CD276','VTCN1','MSR1','FN1','IRF4')
geneset1 <- geneset1$gene
geneset2 <- geneset2$gene
geneset3 <- geneset3$gene
geneset4 <- geneset4$gene
geneset5 <- geneset5$gene
geneset6 <- geneset6$gene
geneSets <- list(geneset1,geneset2, geneset3, geneset4, geneset5, geneset6, geneset7, geneset8)
names(geneSets) <- c("CHOLESTEROL_EFFLUX","ANGIOGENESIS", "CHOLESTEROL_ESTERIFICATION", "PHAGOCYTOSIS", "AUTOPHAGY", "LYSOSOME", "M1", "M2")
cells_AUC <- AUCell_calcAUC(geneSets, cells_rankings, aucMaxRank=nrow(cells_rankings)*0.1)
scrna <- scRNA
geneSet <- "CHOLESTEROL_EFFLUX"
geneSet <- "ANGIOGENESIS"
geneSet <- "CHOLESTEROL_ESTERIFICATION"
geneSet <- "PHAGOCYTOSIS"
geneSet <- "AUTOPHAGY"
geneSet <- "LYSOSOME"
geneSet <- "M1"
geneSet <- "M2"
aucs <- as.numeric(getAUC(cells_AUC)[geneSet, ])
scrna$CHOLESTEROL_EFFLUX  <- aucs
scrna$ANGIOGENESIS  <- aucs
scrna$CHOLESTEROL_ESTERIFICATION  <- aucs
scrna$PHAGOCYTOSIS  <- aucs
scrna$AUTOPHAGY  <- aucs
scrna$LYSOSOME  <- aucs
scrna$M1  <- aucs
scrna$M2  <- aucs
df <- FetchData(scrna, c("CHOLESTEROL_EFFLUX","ANGIOGENESIS", 
                         "CHOLESTEROL_ESTERIFICATION", "PHAGOCYTOSIS", 
                         "AUTOPHAGY", "LYSOSOME", "M1", "M2","celltype"))
head(df)
df$celltype <- as.factor(df$celltype)
celltype <- unique(df$celltype)
celltype <- as.character(celltype)
plot1 <- ggplot(df, aes(x=celltype, y=CHOLESTEROL_EFFLUX, fill=celltype)) + 
  geom_violin()+
  geom_boxplot(width=0.1,outlier.colour = NA)+theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  labs(title = "CHOLESTEROL_EFFLUX")+
  theme(plot.title=element_text(size=24, hjust=0.5,vjust=0.5, lineheight=113), 
        axis.text.x=element_text(angle = 45, hjust=0.5,vjust=0.5))
print(plot1)
plot2 <- ggplot(df, aes(x=celltype, y=ANGIOGENESIS, fill=celltype)) + 
  geom_violin()+
  geom_boxplot(width=0.1,outlier.colour = NA)+theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  labs(title = "ANGIOGENESIS")+
  theme(plot.title=element_text(size=24, hjust=0.5,vjust=0.5, lineheight=113), 
        axis.text.x=element_text(angle = 45, hjust=0.5,vjust=0.5))
print(plot2)
plot3 <- ggplot(df, aes(x=celltype, y=CHOLESTEROL_ESTERIFICATION, fill=celltype)) + 
  geom_violin()+
  geom_boxplot(width=0.1,outlier.colour = NA)+theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  labs(title = "CHOLESTEROL_ESTERIFICATION")+
  theme(plot.title=element_text(size=24, hjust=0.5,vjust=0.5, lineheight=113), 
        axis.text.x=element_text(angle = 45, hjust=0.5,vjust=0.5))
print(plot3)
plot4 <- ggplot(df, aes(x=celltype, y=PHAGOCYTOSIS, fill=celltype)) + 
  geom_violin()+
  geom_boxplot(width=0.1,outlier.colour = NA)+theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  labs(title = "PHAGOCYTOSIS")+
  theme(plot.title=element_text(size=24, hjust=0.5,vjust=0.5, lineheight=113), 
        axis.text.x=element_text(angle = 45, hjust=0.5,vjust=0.5))
print(plot4)
plot5 <- ggplot(df, aes(x=celltype, y=AUTOPHAGY, fill=celltype)) + 
  geom_violin()+
  geom_boxplot(width=0.1,outlier.colour = NA)+theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  labs(title = "AUTOPHAGY")+
  theme(plot.title=element_text(size=24, hjust=0.5,vjust=0.5, lineheight=113), 
        axis.text.x=element_text(angle = 45, hjust=0.5,vjust=0.5))
print(plot5)
plot6 <- ggplot(df, aes(x=celltype, y=LYSOSOME, fill=celltype)) + 
  geom_violin()+
  geom_boxplot(width=0.1,outlier.colour = NA)+theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  labs(title = "LYSOSOME")+
  theme(plot.title=element_text(size=24, hjust=0.5,vjust=0.5, lineheight=113), 
        axis.text.x=element_text(angle = 45, hjust=0.5,vjust=0.5))
print(plot6)
plot7 <- ggplot(df, aes(x=celltype, y=M1, fill=celltype)) + 
  geom_violin()+
  geom_boxplot(width=0.1,outlier.colour = NA)+theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  labs(title = "M1")+
  theme(plot.title=element_text(size=24, hjust=0.5,vjust=0.5, lineheight=113), 
        axis.text.x=element_text(angle = 45, hjust=0.5,vjust=0.5))
print(plot7)
plot8 <- ggplot(df, aes(x=celltype, y=M2, fill=celltype)) + 
  geom_violin()+
  geom_boxplot(width=0.1,outlier.colour = NA)+theme_classic()+
  scale_fill_manual(values = cell_type_cols)+
  labs(title = "M2")+
  theme(plot.title=element_text(size=24, hjust=0.5,vjust=0.5, lineheight=113), 
        axis.text.x=element_text(angle = 45, hjust=0.5,vjust=0.5))
print(plot8)


##############################################
setwd("/home/data/project/scenic")
scRNA <- readRDS("../scenic/scRNA_immun_annotation.rds")
Idents(scRNA) <- "celltype"
DefaultAssay(scRNA) <- "RNA"
DimPlot(scRNA, reduction = "tsne", label = T)
write.csv(t(as.matrix(scRNA@assays$RNA@counts)),file = "Myeloid.csv")
emb.tsne <- read.table("./postscenic.tsne.txt", sep = "\t", row.names = 1, header = T)
emb.umap <- read.table("./postscenic.umap.txt", sep = "\t", row.names = 1, header = T)
colnames(emb.tsne) <- paste0("tSNE_", 1:2)
colnames(emb.umap) <- paste0("UMAP_", 1:2)
identical(rownames(emb.tsne), rownames(scRNA@meta.data))
identical(rownames(emb.umap), rownames(scRNA@meta.data))
cell.info <- scRNA@meta.data
head(cell.info)
cell.info <- cbind(cell.info, emb.tsne[rownames(cell.info), ])
cell.info <- cbind(cell.info, emb.umap[rownames(cell.info), ])
identical(rownames(cell.info), rownames(emb.tsne))
rasMat <- fread("./postscenic.AUCell.txt", sep = "\t", header = T, data.table = F) 
rownames(rasMat) <- rasMat$V1
colnames(rasMat) <- sub("(+)", "", colnames(rasMat), fixed = T)
rasMat <- rasMat[, -1]
cell.types <- names(table(cell.info$celltype))
ctMat <- lapply(cell.types, function(i) {
  as.numeric(cell.info$celltype == i)
})
ctMat <- do.call(cbind, ctMat)
colnames(ctMat) <- cell.types
rownames(ctMat) <- rownames(cell.info)
rssMat <- pblapply(colnames(rasMat), function(i) {
  sapply(colnames(ctMat), function(j) {
    1 - JSD(rbind(rasMat[, i], ctMat[, j]), unit = 'log2', est.prob = "empirical")
  })
})
rssMat <- do.call(rbind, rssMat)
rownames(rssMat) <- colnames(rasMat)
colnames(rssMat) <- colnames(ctMat)
rssMat <- readRDS("./rssMat.rds")
binMat <- read.table("./postscenic.binary_mtx.txt", sep = "\t", header = T, row.names = 1, check.names = FALSE)
colnames(binMat) <- sub("(+)", "", colnames(binMat), fixed = T)
source("plotRegulonRank.R")
PlotRegulonRank(rssMat, "Mac-C7-SPP1")


##############################################
library(nichenetr)
setwd("/home/data/project/NicheNet/")
scRNA = readRDS("scRNA_normalizdate.rds")
load("sce_markers.Rdata")
deg <- sce.markers
deg <- subset(deg, deg$cluster %in% "SPP1 Mac")
seuratObj <- scRNA
seuratObj@meta.data %>% head()
seuratObj@meta.data$celltype %>% table()
seuratObj$aggregate <- seuratObj$Group
seuratObj@meta.data$aggregate %>% table()
ligand_target_matrix = readRDS("ligand_target_matrix.rds")
lr_network = readRDS("lr_network.rds")
weighted_networks = readRDS("weighted_networks.rds")
weighted_networks_lr = weighted_networks$lr_sig %>% 
  inner_join(lr_network %>% distinct(from,to), by = c("from","to"))
head(weighted_networks$lr_sig) 
head(weighted_networks$gr) 
receiver = "SPP1 Mac"
Idents(seuratObj) <- "celltype"
expressed_genes_receiver = get_expressed_genes(receiver, seuratObj, pct = 0.10) 
background_expressed_genes = expressed_genes_receiver %>% .[. %in% rownames(ligand_target_matrix)]
sender_celltypes = unique(seuratObj$celltype)[-18]
list_expressed_genes_sender = sender_celltypes %>% unique() %>% 
  lapply(get_expressed_genes, seuratObj, 0.10) 
expressed_genes_sender = list_expressed_genes_sender %>% 
  unlist() %>% unique() 
geneset = deg %>% filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.5) %>% pull(gene)
geneset = geneset %>% .[. %in% rownames(ligand_target_matrix)]
ligands = lr_network %>% pull(from) %>% unique()
receptors = lr_network %>% pull(to) %>% unique()
expressed_ligands = intersect(ligands,expressed_genes_sender)
expressed_receptors = intersect(receptors,expressed_genes_receiver)
potential_ligands = lr_network %>% filter(from %in% expressed_ligands & to %in% expressed_receptors) %>% pull(from) %>% unique()
ligand_activities = predict_ligand_activities(geneset = geneset, 
                                              background_expressed_genes = background_expressed_genes, 
                                              ligand_target_matrix = ligand_target_matrix, 
                                              potential_ligands = potential_ligands)
ligand_activities = ligand_activities %>% arrange(-pearson) %>% mutate(rank = rank(desc(pearson)))
ligand_activities
best_upstream_ligands = ligand_activities %>% 
  top_n(20, pearson) %>% arrange(-pearson) %>% pull(test_ligand) %>% unique()
DotPlot(seuratObj, features = best_upstream_ligands %>% rev(), cols = "RdYlBu") + RotatedAxis()
active_ligand_target_links_df = best_upstream_ligands %>% lapply(get_weighted_ligand_target_links,
                                                                 geneset = geneset, ligand_target_matrix = ligand_target_matrix,
                                                                 n = 20) %>% bind_rows() %>% drop_na()
active_ligand_target_links = prepare_ligand_target_visualization(ligand_target_df = active_ligand_target_links_df, 
                                                                 ligand_target_matrix = ligand_target_matrix, 
                                                                 cutoff = 0.33)
order_ligands = intersect(best_upstream_ligands, colnames(active_ligand_target_links)) %>% 
  rev() %>% make.names()
order_targets = active_ligand_target_links_df$target %>% 
  unique() %>% 
  intersect(rownames(active_ligand_target_links)) %>% make.names()
rownames(active_ligand_target_links) = rownames(active_ligand_target_links) %>% make.names() 
colnames(active_ligand_target_links) = colnames(active_ligand_target_links) %>% make.names() 
vis_ligand_target = active_ligand_target_links[order_targets,order_ligands] %>% t()
p_ligand_target_network = vis_ligand_target %>% 
  make_heatmap_ggplot("Prioritized ligands","Predicted target genes", 
                      color = "purple",legend_position = "top", 
                      x_axis_position = "top",legend_title = "Regulatory potential")  + 
  theme(axis.text.x = element_text(face = "italic")) + 
  scale_fill_gradient2(low = "whitesmoke",  high = "purple", breaks = c(0,0.0045,0.0090))
p_ligand_target_network
p_ligand_target_network = vis_ligand_target %>% make_heatmap_ggplot("Prioritized ligands",
                                                                    "Predicted target genes", 
                                                                    color = "purple",
                                                                    legend_position = "top", 
                                                                    x_axis_position = "top",
                                                                    legend_title = "Regulatory potential")  + 
  theme(axis.text.x = element_text(face = "italic")) + 
  scale_fill_gradient2(low = "whitesmoke",  high = "#e41b16", breaks = c(0,0.005,0.01))
p_ligand_target_network
lr_network_top = lr_network %>% 
  filter(from %in% best_upstream_ligands & to %in% e
         xpressed_receptors) %>% distinct(from,to)
best_upstream_receptors = lr_network_top %>% pull(to) %>% unique()
lr_network_top_df_large = weighted_networks_lr %>% filter(from %in% best_upstream_ligands & to %in% best_upstream_receptors)
lr_network_top_df = lr_network_top_df_large %>% spread("from","weight",fill = 0)
lr_network_top_matrix = lr_network_top_df %>% dplyr::select(-to) %>% 
  as.matrix() %>% magrittr::set_rownames(lr_network_top_df$to)
dist_receptors = dist(lr_network_top_matrix, method = "binary")
hclust_receptors = hclust(dist_receptors, method = "ward.D2")
order_receptors = hclust_receptors$labels[hclust_receptors$order]
dist_ligands = dist(lr_network_top_matrix %>% t(), method = "binary")
hclust_ligands = hclust(dist_ligands, method = "ward.D2")
order_ligands_receptor = hclust_ligands$labels[hclust_ligands$order]
order_receptors = order_receptors %>% intersect(rownames(lr_network_top_matrix))
order_ligands_receptor = order_ligands_receptor %>% intersect(colnames(lr_network_top_matrix))
vis_ligand_receptor_network = lr_network_top_matrix[order_receptors, order_ligands_receptor]
rownames(vis_ligand_receptor_network) = order_receptors %>% make.names()
colnames(vis_ligand_receptor_network) = order_ligands_receptor %>% make.names()
p_ligand_receptor_network = vis_ligand_receptor_network %>% t() %>% 
  make_heatmap_ggplot("Ligands","Receptors", 
                      color = "mediumvioletred", 
                      x_axis_position = "top",
                      legend_title = "Prior interaction potential")
p_ligand_receptor_network
lr_network_strict = lr_network %>% filter(database != "ppi_prediction_go" & database != "ppi_prediction")
ligands_bona_fide = lr_network_strict %>% pull(from) %>% unique()
receptors_bona_fide = lr_network_strict %>% pull(to) %>% unique()
lr_network_top_df_large_strict = lr_network_top_df_large %>% 
  distinct(from,to) %>% 
  inner_join(lr_network_strict, by = c("from","to")) %>% 
  distinct(from,to)
lr_network_top_df_large_strict = lr_network_top_df_large_strict %>% inner_join(lr_network_top_df_large, by = c("from","to"))
lr_network_top_df_strict = lr_network_top_df_large_strict %>% spread("from","weight",fill = 0)
lr_network_top_matrix_strict = lr_network_top_df_strict %>% 
  dplyr::select(-to) %>% 
  as.matrix() %>% 
  magrittr::set_rownames(lr_network_top_df_strict$to)
dist_receptors = dist(lr_network_top_matrix_strict, method = "binary")
hclust_receptors = hclust(dist_receptors, method = "ward.D2")
order_receptors = hclust_receptors$labels[hclust_receptors$order]
dist_ligands = dist(lr_network_top_matrix_strict %>% t(), method = "binary")
hclust_ligands = hclust(dist_ligands, method = "ward.D2")
order_ligands_receptor = hclust_ligands$labels[hclust_ligands$order]
order_receptors = order_receptors %>% intersect(rownames(lr_network_top_matrix_strict))
order_ligands_receptor = order_ligands_receptor %>% intersect(colnames(lr_network_top_matrix_strict))
vis_ligand_receptor_network_strict = lr_network_top_matrix_strict[order_receptors, order_ligands_receptor]
rownames(vis_ligand_receptor_network_strict) = order_receptors %>% make.names()
colnames(vis_ligand_receptor_network_strict) = order_ligands_receptor %>% make.names()
p_ligand_receptor_network_strict = vis_ligand_receptor_network_strict %>% t() %>% 
  make_heatmap_ggplot("Ligands","Receptors", color = "mediumvioletred", x_axis_position = "top",
                      legend_title = "Prior interaction potential\n(bona fide)")
p_ligand_receptor_network_strict


##############################################
setwd("/home/data/project/cellphoneDB/")
scRNA <- readRDS("./scRNA_immune.rds")
write.table(as.matrix(scRNA@assays$RNA@data), 'cellphonedb_count.txt', sep='\t', quote=F)
metadata <- cbind(rownames(scRNA@meta.data), scRNA@meta.data[,'celltype', drop=F])  
colnames(metadata) <- c("cell", "celltype")
metadata <- as.matrix(metadata)
table(is.na(metadata))
#metadata[is.na(metadata)] = "Unkown" 
write.table(metadata, 'cellphonedb_meta.txt', sep='\t', quote=F, row.names=F)
mypvals <- read.table("./out/pvalues.txt",header = T,sep = "\t",stringsAsFactors = F)
mymeans <- read.table("./out/means.txt",header = T,sep = "\t",stringsAsFactors = F) 
colnames(mypvals)
kp = grepl(pattern = ".SPP1.", colnames(mypvals))
table(kp)
pos = (1:ncol(mypvals))[kp] 
index <- colnames(mypvals)[kp] %>% unique()
pos <- pos[c(1,14,15,17,18,19,20,21,22,23,24,25,26,27)]
index <- colnames(mypvals)[pos] %>% unique()
choose_pvalues <- mypvals[,c(c(1,5,6,8,9),pos  )]
choose_means <- mymeans[,c(c(1,5,6,8,9),pos)]
logi <- apply(choose_pvalues[,5:ncol(choose_pvalues)]<0.05, 1, sum) 
choose_pvalues <- choose_pvalues[logi>=1,]
logi1 <- choose_pvalues$gene_a != ""
logi2 <- choose_pvalues$gene_b != ""
logi <- logi1 & logi2
choose_pvalues <- choose_pvalues[logi,]
dim(choose_pvalues)
choose_means <- choose_means[choose_means$id_cp_interaction %in% choose_pvalues$id_cp_interaction,]
plot_pvalues <- unite(choose_pvalues, pairs, c("gene_a", "gene_b"), remove = F)
plot_pvalues <- plot_pvalues[, c(2, 7:20)]
rownames(plot_pvalues) <- plot_pvalues$pairs
plot_pvalues <- plot_pvalues[,-1]
plot_pvalues <- as.matrix(plot_pvalues)
dim(plot_pvalues)
table(is.na(plot_pvalues))
pheatmap::pheatmap(plot_pvalues, cluster_rows = F, cluster_cols = F)
select_pairs <- c("NRP1_VEGFB", "NRP2_VEGFA","ADRB2_VEGFB","VEGFA_FLT1", "CSF1_SIRPA",  "ANXA1_FPR1","CD55_ADGRE5",
                  "MDK_LRP1",  "HLA-F_LILRB2",  "MIF_TNFRSF14", "C3_C3AR1", "CCL3_CCR1", "CCL3_CCR5", "GRN_SORT1")
plot_pvalues <- plot_pvalues[rownames(plot_pvalues) %in% select_pairs, ]
plot_pvalues <- plot_pvalues[match(select_pairs, rownames(plot_pvalues)), ]
colnames(plot_pvalues) <- str_remove(colnames(plot_pvalues), ".SPP1.Mac")
select_colnames <- c("cDC1", "cDC2", "mregDC" , "pDC", "Classical Mono" , "Intermediate Mono", "Nonclassical Mono", "IFNIC Mac", "Inflammatory Mac", "Resident Mac", "Profibrotic Mac",
                     "TREM2 Mac", "SPP1 Mac", "Mast")
plot_pvalues <- plot_pvalues[, match(select_colnames, colnames(plot_pvalues))]
pheatmap <- pheatmap(plot_pvalues,cluster_cols = F,cluster_rows = F,show_colnames=T,show_rownames=T,
                     angle_col="270",
                     #border=F, #border_color = "white", 
                     border_color = "white",
                     breaks = seq(0,1,length.out = 100),
                     color =colorRampPalette(c("#e41b16", "#ffffff"))(100),
                     #gaps_col = gaps_col,
                     cellwidth = 16, cellheight = 16,
                     main = "Interaction related with SPP1+ Mac"  )


##############################################
library(NMF)
library(ggalluvial)
setwd("/home/data/project/cellchat/")
scRNA <- readRDS("./scRNA_immun_annotation.rds")
table(scRNA$CellType)
scRNA <- scRNA[, scRNA$CellType %in% c("DC", "Monocyte", "Macrophage")]
data.input = scRNA@assays$RNA@data 
metadata = scRNA@meta.data 
metadata$labels <- metadata$celltype 
unique(metadata$labels)
cellchat <- createCellChat(object = data.input, metadata = metadata, group.by = "labels")
cellchat <- addmetadata(cellchat, metadata = metadata)
cellchat <- setIdent(cellchat, ident.use = "labels") 
levels(cellchat@idents); length(unique(cellchat@idents))
cellchat@idents <- factor(cellchat@idents, levels = c("cDC1", "cDC2", "mregDC" , "pDC", 
                                                      "Classical Mono" , "Intermediate Mono", 
                                                      "Nonclassical Mono", "IFNIC Mac", 
                                                      "Inflammatory Mac", 
                                                      "Resident Mac", "Profibrotic Mac",
                                                      "TREM2 Mac", "SPP1 Mac"))
table(cellchat@idents)
groupSize <- as.numeric(table(cellchat@idents)) 
groupSize
CellChatDB <- CellChatDB.human 
showDatabaseCategory(CellChatDB)
dplyr::glimpse(CellChatDB$interaction) 
CellChatDB_interaction <- CellChatDB$interaction
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") 
cellchat@DB <- CellChatDB.use 
cellchat <- subsetData(cellchat) 
future::plan("multiprocess", workers = 4) 
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- projectData(cellchat, PPI.human)
cellchat <- computeCommunProb(cellchat)
saveRDS(cellchat, file = "cellchat1.rds")
cellchat <- readRDS("cellchat1.rds")
cellchat <- filterCommunication(cellchat, min.cells = 4)
df.net <- subsetCommunication(cellchat) 
table(df.net$pathway_name)
length(unique(df.net$pathway_name))
levels(cellchat@idents)
df.net <- subsetCommunication(cellchat, sources.use = c(2, 6), targets.use = c(1,27))
df.net <- subsetCommunication(cellchat, signaling = c("VEGF", "BTLA", "XCR", "CD137"))
cellchat <- computeCommunProbPathway(cellchat)
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
length(groupSize)
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
dev.off()
mat <- cellchat@net$weight 
par(mfrow = c(3,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
  mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
  mat2[i, ] <- mat[i, ]
  netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])###通過edge.weight.max参数比较不同网络的边缘权重
}
pathways.show <- c("ANGPTL")
vertex.receiver = seq(1,7) 
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
netAnalysis_contribution(cellchat, signaling = pathways.show)
pairLR.CXCL <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.CXCL[1,] 
vertex.receiver = seq(1,7) 
netVisual_individual(cellchat, signaling = pathways.show,  pairLR.use = LR.show, vertex.receiver = vertex.receiver)
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "circle")
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "chord")
pathways.show.all <- cellchat@netP$pathways
levels(cellchat@idents)
vertex.receiver = seq(1,7)
dir.create("plot")
setwd("plot/")
for (i in 1:length(pathways.show.all)) {
  # Visualize communication network associated with both signaling pathway and individual L-R pairs
  netVisual(cellchat, signaling = pathways.show.all[i], vertex.receiver = vertex.receiver, layout = "hierarchy")
  # Compute and visualize the contribution of each ligand-receptor pair to the overall signaling pathway
  gg <- netAnalysis_contribution(cellchat, signaling = pathways.show.all[i])
  ggsave(filename=paste0(pathways.show.all[i], "_L-R_contribution.pdf"), plot=gg, width = 3, height = 2, units = 'in', dpi = 300)
}
plotGeneExpression(cellchat, signaling = "IL1", enriched.only = FALSE) 
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP") 
netAnalysis_signalingRole_network(cellchat, signaling = pathways.show, width = 8, height = 2.5, font.size = 10)
gg1 <- netAnalysis_signalingRole_scatter(cellchat)
gg2 <- netAnalysis_signalingRole_scatter(cellchat, signaling = c("CXCL", "CCL"))
gg1 + gg2
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing")
ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming")
ht1 + ht2
selectK(cellchat, pattern = "outgoing")
nPatterns = 6
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "outgoing", k = nPatterns)
netAnalysis_river(cellchat, pattern = "outgoing")
netAnalysis_dot(cellchat, pattern = "outgoing")
selectK(cellchat, pattern = "incoming")
nPatterns = 4
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "incoming", k = nPatterns)
netAnalysis_river(cellchat, pattern = "incoming")
netAnalysis_dot(cellchat, pattern = "incoming")
cellchat <- computeNetSimilarity(cellchat, type = "functional")
cellchat <- netEmbedding(cellchat, type = "functional")
cellchat <- netClustering(cellchat, type = "functional")
netVisual_embedding(cellchat, type = "functional", label.size = 3.5)
netVisual_embeddingZoomIn(cellchat, type = "functional", nCol = 2)
cellchat <- computeNetSimilarity(cellchat, type = "structural")
cellchat <- netEmbedding(cellchat, type = "structural")
cellchat <- netClustering(cellchat, type = "structural")
netVisual_embedding(cellchat, type = "structural", label.size = 3.5)
netVisual_embeddingZoomIn(cellchat, type = "structural", nCol = 2)
saveRDS(cellchat, file = "./cellchat.rds")


##############################################
library(scMetabolism)
library(rsvd)
setwd("/home/data/project/scMetabolism/")
scRNA <- readRDS("scRNA_normalizdate.rds")
metadata <- scRNA@meta.data
countexp.Seurat <- scRNA
Idents(countexp.Seurat) <- "celltype"
## Quantify single-cell metabolism with Seurat (Recommended)
countexp.Seurat<-sc.metabolism.Seurat(obj = countexp.Seurat,
                                      method = "VISION",
                                      imputation = F,
                                      ncores = 10,
                                      metabolism.type = "KEGG")
dat <- countexp.Seurat@assays$METABOLISM$score
rownames(dat)
## Visualize
input.pathway<-c("Glycolysis / Gluconeogenesis",
                 "Oxidative phosphorylation",
                 "Citrate cycle (TCA cycle)", 
                 "Fatty acid degradation"  )
DimPlot.metabolism(obj = countexp.Seurat,
                   pathway = "Glycolysis / Gluconeogenesis",
                   dimention.reduction.type = "umap",
                   dimention.reduction.run = F,
                   size = 1)
DotPlot.metabolism(obj = countexp.Seurat,
                   pathway = input.pathway,
                   phenotype = "celltype",
                   norm = "y")
BoxPlot.metabolism(obj = countexp.Seurat,
                   pathway = input.pathway, phenotype = "celltype", ncol = 1)
save(countexp.Seurat, file = "scMetabolism.Rdata")
expr <- readRDS("scmetadatabolism.Rdata")
group_type <- unique(metadata$celltype)
group_list <- metadata$celltype
exp  <- sapply(group_type, function(x){
  apply(expr[,x == group_list],
        MARGIN = 1,
        FUN = mean)
})
exp <- as.data.frame(exp)
df <- do.call(rbind,
              lapply(1:ncol(exp), function(i){
                dat=data.frame(
                  path= rownames(exp),
                  cluster= colnames(exp)[i],
                  sd.1= exp[,i],
                  sd.2= apply(exp[, -i], 1, median)
                )
              }))
df$fc <- df$sd.1 - df$sd.2
top <- df %>% group_by(cluster) %>% top_n(10, fc)
table(duplicated(top$path))
select_pathway <- unique(top$path)
input.pathway <- select_pathway
DotPlot.metadatabolism(obj = countexp.Seurat,
                       pathway = input.pathway,
                       phenotype = "celltype",
                       norm = "y")
load("exp_average.Rdata")
exp <- as.data.frame(exp)
exp$pathway <- rownames(exp)
expr <- gather(exp, key = "CellType", value = "activity", -ncol(exp))
p <- ggplot(expr, aes(x=CellType, y=activity, fill=CellType)) + 
  #geom_violin()+
  #stat_boxplot(geom="errorbar",width=0.1)+
  geom_boxplot(width=0.5,  outlier.shape = NA)+
  #theme_classic()+
  theme_bw()+
  scale_fill_manual(values = brewer.pal(10, "Paired")) + 
  scale_y_continuous(expand = c(0, 0), # 修饰y轴的多个部分
                     limits = c(-0.3, 0.7), 
                     breaks = seq(-0.3,  by = 0.2), 
                     labels = scales::number_format(accuracy = 0.1)) +
  #geom_hline(yintercept = 0 ,lty=4, col="black",lwd=0.3)+
  theme(
    axis.line = element_line(size = 0.2),     
    axis.ticks = element_line(size = 0.3),
    axis.text.y = element_text(face = "italic", colour = "black"),
    axis.text.x = element_text(colour = "black", angle = 45, hjust = 1),
    panel.grid.minor = element_blank(), 
    panel.grid.major = element_blank() ,
    plot.margin = unit(c(2, 1, 1, 1), "cm")) + 
  labs(
    x = NULL, 
    y = NULL, 
    title=NULL)+
  NoLegend()+
  theme(plot.title = element_text(hjust = 0.5))
print(p)


##############################################
library(GEOquery)
library(AnnoProbe)
library(limma)
library(stringr)
library(survival)
library(survminer)
library(GSVA)
setwd("/home/data/project/deconvolution/")
gse = "GSE21545"
eSet <- getGEO(gse, 
               destdir = '.', 
               getGPL = F)
exprSet <- exprs(eSet[[1]])  ; exprSet[1:4,1:4]
ex <- exprSet
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
  (qx[6]-qx[1] > 50 && qx[2] > 0) ||
  (qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) {
  ex[which(ex <= 0)] <- NaN
  exprSet <- log2(ex+1)
  print("log2 transform finished")
}else{
  print("log2 transform not needed")
}
boxplot(exprSet,outline=FALSE, notch=T, las=2)
exprSet <- as.data.frame(exprSet)
pd <- pData(eSet[[1]]) 
p = identical(rownames(pd),colnames(exprSet));p
if(!p) exprSet = exprSet[,match(rownames(pd),colnames(exprSet))] 
gpl <- eSet[[1]]@annotation
exprSet <- as.data.frame(exprSet)
if(F){
  ids <- idmap1::getIDs(gpl)
  ids <- idmap2::get_soft_IDs(gpl)
  ids <- idmap3::get_pipe_IDs(gpl)
}
ids <- ids[, c(1,2)]
exprSet <- exprSet %>%
  rownames_to_column("probe_id") %>%
  inner_join(ids, by="probe_id") %>%
  dplyr::select(-probe_id) %>%
  dplyr::select(symbol,everything()) %>%
  mutate(rowMean =rowMeans(.[,-1])) %>%
  arrange(desc(rowMean)) %>%
  distinct(symbol,.keep_all = T) %>%
  dplyr::select(-rowMean) %>%
  column_to_rownames("symbol")
exprSet <- exprSet
clinical <- pd
tmp = data.frame(colnames(clinical))
clinical = clinical[,c(
  "title",
  "geo_accession",
  "characteristics_ch1.1",
  "platform_id",
  "age (y):ch1",
  "individual:ch1",
  "ischemic event:ch1",
  "ischemic time (days):ch1"
)]
dim(clinical)
meta = clinical
colnames(meta)=c('title','GSM','sample_type','GPL','age','individual','event',"last_followup")
p = identical(rownames(meta),colnames(exprSet));p
meta$time=(as.numeric(meta[,8]))/30
meta$event=ifelse(meta$event=='FALSE',0,1)
meta$age=as.numeric(meta$age) 
if(F){
  table(is.na(meta$age))
  na.omit(meta)
  meta <- meta %>% drop_na(age) 
  exprSet <- exprSet[, meta$GSM]
  p = identical(rownames(meta),colnames(exprSet));p
}
meta$age_group=ifelse(meta$age>median(meta$age),'older','younger')
save(meta,exprSet,file = "sur_model.Rdata")
load("plaque.Rdata")
data_prediction <- read.table("scaden_predictions.txt", sep = "\t", row.names = 1, header = T)
data <- data.frame(row.names = rownames(data_prediction), SPP1 = data_prediction[, colnames(data_prediction) %in% "SPP1.Mac"])
identical(rownames(data), rownames(pd_plaque))
dat <- cbind(pd_plaque, data)
meta <- dat
meta <- filter(meta, !(meta$age %in% "NA"))
res.cut <- surv_cutpoint(meta, 
                         time = "time",
                         event = "event",
                         minprop = 0.3,
                         variables = c("SPP1")) 
res.cat <- surv_categorize(res.cut)
fits <- survfit(Surv(time, event) ~ SPP1, data = res.cat) 
plot <- ggsurvplot(fits,
                   data = res.cat, 
                   palette=c("#cd2626", "#4682b4"), 
                   legend.labs=c("High","Low"), 
                   risk.table = F,  
                   pval.method = T,
                   break.x.by = 30,
                   legend=c(0.5,0.27),
                   legend.title="Group",
                   ggtheme = theme_classic(),
                   pval = T) 
